/*
 * Travel Billing
 * The Travel Invoicing Application System
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.LocalDate;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describe business contract
 */
@ApiModel(description = "Describe business contract")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-04T15:12:40.475542300+02:00[Europe/Paris]")
public class BusinessContract {
  public static final String SERIALIZED_NAME_CONTRACT_ID = "contractId";
  @SerializedName(SERIALIZED_NAME_CONTRACT_ID)
  private Integer contractId;

  public static final String SERIALIZED_NAME_CONTRACT_REF = "contractRef";
  @SerializedName(SERIALIZED_NAME_CONTRACT_REF)
  private String contractRef;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private LocalDate createdAt;

  public static final String SERIALIZED_NAME_ACTIVATED_AT = "activatedAt";
  @SerializedName(SERIALIZED_NAME_ACTIVATED_AT)
  private LocalDate activatedAt;

  public static final String SERIALIZED_NAME_EXPIRE_AT = "expireAt";
  @SerializedName(SERIALIZED_NAME_EXPIRE_AT)
  private LocalDate expireAt;

  /**
   * Status of contact
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CREATED("CREATED"),
    
    ACTIVATED("ACTIVATED"),
    
    SUSPENDED("SUSPENDED"),
    
    EXPIRED("EXPIRED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public BusinessContract() { 
  }

  public BusinessContract contractId(Integer contractId) {
    
    this.contractId = contractId;
    return this;
  }

   /**
   * Internal identifier of the subscription
   * @return contractId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "786876725453", value = "Internal identifier of the subscription")

  public Integer getContractId() {
    return contractId;
  }


  public void setContractId(Integer contractId) {
    this.contractId = contractId;
  }


  public BusinessContract contractRef(String contractRef) {
    
    this.contractRef = contractRef;
    return this;
  }

   /**
   * External contract reference
   * @return contractRef
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CTR-JHKJQGFSHFHGS", value = "External contract reference")

  public String getContractRef() {
    return contractRef;
  }


  public void setContractRef(String contractRef) {
    this.contractRef = contractRef;
  }


  public BusinessContract createdAt(LocalDate createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Creation date of contract (use ISO 8601 format YYYY-MM-DD)
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Fri Apr 22 02:00:00 CEST 2022", value = "Creation date of contract (use ISO 8601 format YYYY-MM-DD)")

  public LocalDate getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(LocalDate createdAt) {
    this.createdAt = createdAt;
  }


  public BusinessContract activatedAt(LocalDate activatedAt) {
    
    this.activatedAt = activatedAt;
    return this;
  }

   /**
   * Activation date of contract (use ISO 8601 format YYYY-MM-DD)
   * @return activatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Sun Apr 24 02:00:00 CEST 2022", value = "Activation date of contract (use ISO 8601 format YYYY-MM-DD)")

  public LocalDate getActivatedAt() {
    return activatedAt;
  }


  public void setActivatedAt(LocalDate activatedAt) {
    this.activatedAt = activatedAt;
  }


  public BusinessContract expireAt(LocalDate expireAt) {
    
    this.expireAt = expireAt;
    return this;
  }

   /**
   * Expiration date of contract (use ISO 8601 format YYYY-MM-DD)
   * @return expireAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Sat Apr 01 02:00:00 CEST 2023", value = "Expiration date of contract (use ISO 8601 format YYYY-MM-DD)")

  public LocalDate getExpireAt() {
    return expireAt;
  }


  public void setExpireAt(LocalDate expireAt) {
    this.expireAt = expireAt;
  }


  public BusinessContract status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of contact
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ACTIVE", value = "Status of contact")

  public StatusEnum getStatus() {
    return status;
  }


  public void setStatus(StatusEnum status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessContract businessContract = (BusinessContract) o;
    return Objects.equals(this.contractId, businessContract.contractId) &&
        Objects.equals(this.contractRef, businessContract.contractRef) &&
        Objects.equals(this.createdAt, businessContract.createdAt) &&
        Objects.equals(this.activatedAt, businessContract.activatedAt) &&
        Objects.equals(this.expireAt, businessContract.expireAt) &&
        Objects.equals(this.status, businessContract.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contractId, contractRef, createdAt, activatedAt, expireAt, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessContract {\n");
    sb.append("    contractId: ").append(toIndentedString(contractId)).append("\n");
    sb.append("    contractRef: ").append(toIndentedString(contractRef)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    activatedAt: ").append(toIndentedString(activatedAt)).append("\n");
    sb.append("    expireAt: ").append(toIndentedString(expireAt)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contractId");
    openapiFields.add("contractRef");
    openapiFields.add("createdAt");
    openapiFields.add("activatedAt");
    openapiFields.add("expireAt");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BusinessContract
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (BusinessContract.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in BusinessContract is not found in the empty JSON string", BusinessContract.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BusinessContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BusinessContract` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("contractRef") != null && !jsonObj.get("contractRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractRef").toString()));
      }
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BusinessContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BusinessContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BusinessContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BusinessContract.class));

       return (TypeAdapter<T>) new TypeAdapter<BusinessContract>() {
           @Override
           public void write(JsonWriter out, BusinessContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BusinessContract read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BusinessContract given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BusinessContract
  * @throws IOException if the JSON string is invalid with respect to BusinessContract
  */
  public static BusinessContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BusinessContract.class);
  }

 /**
  * Convert an instance of BusinessContract to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

