/*
 * Travel Billing
 * The Travel Invoicing Application System
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.BusinessAddress;
import org.openapitools.client.model.EligibilityResponseBillingInProgress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Returns
 */
@ApiModel(description = "Returns")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-04T15:12:40.475542300+02:00[Europe/Paris]")
public class EligibilityResponse {
  public static final String SERIALIZED_NAME_CUSTOMER_REF = "customerRef";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_REF)
  private String customerRef;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_REF = "subscriptionRef";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_REF)
  private String subscriptionRef;

  public static final String SERIALIZED_NAME_CONTRACT_REF = "contractRef";
  @SerializedName(SERIALIZED_NAME_CONTRACT_REF)
  private String contractRef;

  public static final String SERIALIZED_NAME_CONTRACT_STATUS = "contractStatus";
  @SerializedName(SERIALIZED_NAME_CONTRACT_STATUS)
  private String contractStatus;

  public static final String SERIALIZED_NAME_BILLING_ADDRESS = "billingAddress";
  @SerializedName(SERIALIZED_NAME_BILLING_ADDRESS)
  private BusinessAddress billingAddress;

  public static final String SERIALIZED_NAME_BILLING_IN_PROGRESS = "billingInProgress";
  @SerializedName(SERIALIZED_NAME_BILLING_IN_PROGRESS)
  private EligibilityResponseBillingInProgress billingInProgress;

  public EligibilityResponse() { 
  }

  public EligibilityResponse customerRef(String customerRef) {
    
    this.customerRef = customerRef;
    return this;
  }

   /**
   * Get customerRef
   * @return customerRef
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCustomerRef() {
    return customerRef;
  }


  public void setCustomerRef(String customerRef) {
    this.customerRef = customerRef;
  }


  public EligibilityResponse subscriptionRef(String subscriptionRef) {
    
    this.subscriptionRef = subscriptionRef;
    return this;
  }

   /**
   * Get subscriptionRef
   * @return subscriptionRef
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSubscriptionRef() {
    return subscriptionRef;
  }


  public void setSubscriptionRef(String subscriptionRef) {
    this.subscriptionRef = subscriptionRef;
  }


  public EligibilityResponse contractRef(String contractRef) {
    
    this.contractRef = contractRef;
    return this;
  }

   /**
   * Get contractRef
   * @return contractRef
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContractRef() {
    return contractRef;
  }


  public void setContractRef(String contractRef) {
    this.contractRef = contractRef;
  }


  public EligibilityResponse contractStatus(String contractStatus) {
    
    this.contractStatus = contractStatus;
    return this;
  }

   /**
   * Get contractStatus
   * @return contractStatus
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContractStatus() {
    return contractStatus;
  }


  public void setContractStatus(String contractStatus) {
    this.contractStatus = contractStatus;
  }


  public EligibilityResponse billingAddress(BusinessAddress billingAddress) {
    
    this.billingAddress = billingAddress;
    return this;
  }

   /**
   * Get billingAddress
   * @return billingAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BusinessAddress getBillingAddress() {
    return billingAddress;
  }


  public void setBillingAddress(BusinessAddress billingAddress) {
    this.billingAddress = billingAddress;
  }


  public EligibilityResponse billingInProgress(EligibilityResponseBillingInProgress billingInProgress) {
    
    this.billingInProgress = billingInProgress;
    return this;
  }

   /**
   * Get billingInProgress
   * @return billingInProgress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EligibilityResponseBillingInProgress getBillingInProgress() {
    return billingInProgress;
  }


  public void setBillingInProgress(EligibilityResponseBillingInProgress billingInProgress) {
    this.billingInProgress = billingInProgress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EligibilityResponse eligibilityResponse = (EligibilityResponse) o;
    return Objects.equals(this.customerRef, eligibilityResponse.customerRef) &&
        Objects.equals(this.subscriptionRef, eligibilityResponse.subscriptionRef) &&
        Objects.equals(this.contractRef, eligibilityResponse.contractRef) &&
        Objects.equals(this.contractStatus, eligibilityResponse.contractStatus) &&
        Objects.equals(this.billingAddress, eligibilityResponse.billingAddress) &&
        Objects.equals(this.billingInProgress, eligibilityResponse.billingInProgress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerRef, subscriptionRef, contractRef, contractStatus, billingAddress, billingInProgress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EligibilityResponse {\n");
    sb.append("    customerRef: ").append(toIndentedString(customerRef)).append("\n");
    sb.append("    subscriptionRef: ").append(toIndentedString(subscriptionRef)).append("\n");
    sb.append("    contractRef: ").append(toIndentedString(contractRef)).append("\n");
    sb.append("    contractStatus: ").append(toIndentedString(contractStatus)).append("\n");
    sb.append("    billingAddress: ").append(toIndentedString(billingAddress)).append("\n");
    sb.append("    billingInProgress: ").append(toIndentedString(billingInProgress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerRef");
    openapiFields.add("subscriptionRef");
    openapiFields.add("contractRef");
    openapiFields.add("contractStatus");
    openapiFields.add("billingAddress");
    openapiFields.add("billingInProgress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EligibilityResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (EligibilityResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in EligibilityResponse is not found in the empty JSON string", EligibilityResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!EligibilityResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EligibilityResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("customerRef") != null && !jsonObj.get("customerRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerRef").toString()));
      }
      if (jsonObj.get("subscriptionRef") != null && !jsonObj.get("subscriptionRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionRef").toString()));
      }
      if (jsonObj.get("contractRef") != null && !jsonObj.get("contractRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractRef").toString()));
      }
      if (jsonObj.get("contractStatus") != null && !jsonObj.get("contractStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractStatus").toString()));
      }
      // validate the optional field `billingAddress`
      if (jsonObj.getAsJsonObject("billingAddress") != null) {
        BusinessAddress.validateJsonObject(jsonObj.getAsJsonObject("billingAddress"));
      }
      // validate the optional field `billingInProgress`
      if (jsonObj.getAsJsonObject("billingInProgress") != null) {
        EligibilityResponseBillingInProgress.validateJsonObject(jsonObj.getAsJsonObject("billingInProgress"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EligibilityResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EligibilityResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EligibilityResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EligibilityResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<EligibilityResponse>() {
           @Override
           public void write(JsonWriter out, EligibilityResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EligibilityResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EligibilityResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EligibilityResponse
  * @throws IOException if the JSON string is invalid with respect to EligibilityResponse
  */
  public static EligibilityResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EligibilityResponse.class);
  }

 /**
  * Convert an instance of EligibilityResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

