/*
 * Travel Billing
 * The Travel Invoicing Application System
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.Invoice;
import org.openapitools.client.model.InvoicesGet200Response;
import org.openapitools.client.model.OperationsGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class Phase2Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public Phase2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public Phase2Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for invoicesGet
     * @param subscriptionId External identifier of subscription (optional)
     * @param contractRef External identifier of the deferred billing contract for the customer (optional)
     * @param customerRef External identifier of the buyer (optional)
     * @param contactRef IDExternal identifier of the Customer&#39;s contact (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned a list of Invoices </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoicesGetCall(String subscriptionId, String contractRef, String customerRef, String contactRef, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscriptionId", subscriptionId));
        }

        if (contractRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contractRef", contractRef));
        }

        if (customerRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerRef", customerRef));
        }

        if (contactRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contactRef", contactRef));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoicesGetValidateBeforeCall(String subscriptionId, String contractRef, String customerRef, String contactRef, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = invoicesGetCall(subscriptionId, contractRef, customerRef, contactRef, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns a list of Invoices
     * @param subscriptionId External identifier of subscription (optional)
     * @param contractRef External identifier of the deferred billing contract for the customer (optional)
     * @param customerRef External identifier of the buyer (optional)
     * @param contactRef IDExternal identifier of the Customer&#39;s contact (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @return InvoicesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned a list of Invoices </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public InvoicesGet200Response invoicesGet(String subscriptionId, String contractRef, String customerRef, String contactRef, Integer limit, Integer offset) throws ApiException {
        ApiResponse<InvoicesGet200Response> localVarResp = invoicesGetWithHttpInfo(subscriptionId, contractRef, customerRef, contactRef, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of Invoices
     * @param subscriptionId External identifier of subscription (optional)
     * @param contractRef External identifier of the deferred billing contract for the customer (optional)
     * @param customerRef External identifier of the buyer (optional)
     * @param contactRef IDExternal identifier of the Customer&#39;s contact (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @return ApiResponse&lt;InvoicesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned a list of Invoices </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InvoicesGet200Response> invoicesGetWithHttpInfo(String subscriptionId, String contractRef, String customerRef, String contactRef, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = invoicesGetValidateBeforeCall(subscriptionId, contractRef, customerRef, contactRef, limit, offset, null);
        Type localVarReturnType = new TypeToken<InvoicesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of Invoices
     * @param subscriptionId External identifier of subscription (optional)
     * @param contractRef External identifier of the deferred billing contract for the customer (optional)
     * @param customerRef External identifier of the buyer (optional)
     * @param contactRef IDExternal identifier of the Customer&#39;s contact (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned a list of Invoices </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoicesGetAsync(String subscriptionId, String contractRef, String customerRef, String contactRef, Integer limit, Integer offset, final ApiCallback<InvoicesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoicesGetValidateBeforeCall(subscriptionId, contractRef, customerRef, contactRef, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<InvoicesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for invoicesInvoiceRefGet
     * @param invoiceRef External identifier of the invoice (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned a list of invoices </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoicesInvoiceRefGetCall(String invoiceRef, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/invoices/{invoiceRef}"
            .replaceAll("\\{" + "invoiceRef" + "\\}", localVarApiClient.escapeString(invoiceRef.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invoicesInvoiceRefGetValidateBeforeCall(String invoiceRef, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'invoiceRef' is set
        if (invoiceRef == null) {
            throw new ApiException("Missing the required parameter 'invoiceRef' when calling invoicesInvoiceRefGet(Async)");
        }
        

        okhttp3.Call localVarCall = invoicesInvoiceRefGetCall(invoiceRef, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns an invoice
     * @param invoiceRef External identifier of the invoice (required)
     * @return Invoice
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned a list of invoices </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public Invoice invoicesInvoiceRefGet(String invoiceRef) throws ApiException {
        ApiResponse<Invoice> localVarResp = invoicesInvoiceRefGetWithHttpInfo(invoiceRef);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns an invoice
     * @param invoiceRef External identifier of the invoice (required)
     * @return ApiResponse&lt;Invoice&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned a list of invoices </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Invoice> invoicesInvoiceRefGetWithHttpInfo(String invoiceRef) throws ApiException {
        okhttp3.Call localVarCall = invoicesInvoiceRefGetValidateBeforeCall(invoiceRef, null);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns an invoice
     * @param invoiceRef External identifier of the invoice (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned a list of invoices </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call invoicesInvoiceRefGetAsync(String invoiceRef, final ApiCallback<Invoice> _callback) throws ApiException {

        okhttp3.Call localVarCall = invoicesInvoiceRefGetValidateBeforeCall(invoiceRef, _callback);
        Type localVarReturnType = new TypeToken<Invoice>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for operationsGet
     * @param subscriptionId External identifier of subscription (optional)
     * @param invoiceRef External identifier of the invoice (optional)
     * @param customerRef External identifier of the buyer (optional)
     * @param contactRef IDExternal identifier of the Customer&#39;s contact (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned a list of Operations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsGetCall(String subscriptionId, String invoiceRef, String customerRef, String contactRef, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscriptionId", subscriptionId));
        }

        if (invoiceRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoiceRef", invoiceRef));
        }

        if (customerRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customerRef", customerRef));
        }

        if (contactRef != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contactRef", contactRef));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKey", "OAuth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsGetValidateBeforeCall(String subscriptionId, String invoiceRef, String customerRef, String contactRef, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = operationsGetCall(subscriptionId, invoiceRef, customerRef, contactRef, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * 
     * Returns a list of Operation added to deferred billing
     * @param subscriptionId External identifier of subscription (optional)
     * @param invoiceRef External identifier of the invoice (optional)
     * @param customerRef External identifier of the buyer (optional)
     * @param contactRef IDExternal identifier of the Customer&#39;s contact (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @return OperationsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned a list of Operations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public OperationsGet200Response operationsGet(String subscriptionId, String invoiceRef, String customerRef, String contactRef, Integer limit, Integer offset) throws ApiException {
        ApiResponse<OperationsGet200Response> localVarResp = operationsGetWithHttpInfo(subscriptionId, invoiceRef, customerRef, contactRef, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of Operation added to deferred billing
     * @param subscriptionId External identifier of subscription (optional)
     * @param invoiceRef External identifier of the invoice (optional)
     * @param customerRef External identifier of the buyer (optional)
     * @param contactRef IDExternal identifier of the Customer&#39;s contact (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @return ApiResponse&lt;OperationsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned a list of Operations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationsGet200Response> operationsGetWithHttpInfo(String subscriptionId, String invoiceRef, String customerRef, String contactRef, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = operationsGetValidateBeforeCall(subscriptionId, invoiceRef, customerRef, contactRef, limit, offset, null);
        Type localVarReturnType = new TypeToken<OperationsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of Operation added to deferred billing
     * @param subscriptionId External identifier of subscription (optional)
     * @param invoiceRef External identifier of the invoice (optional)
     * @param customerRef External identifier of the buyer (optional)
     * @param contactRef IDExternal identifier of the Customer&#39;s contact (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully returned a list of Operations </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> ERROR - Not authenticated </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> ERROR - Access token does not have the required scope </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> ERROR - Internal Server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsGetAsync(String subscriptionId, String invoiceRef, String customerRef, String contactRef, Integer limit, Integer offset, final ApiCallback<OperationsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsGetValidateBeforeCall(subscriptionId, invoiceRef, customerRef, contactRef, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<OperationsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
