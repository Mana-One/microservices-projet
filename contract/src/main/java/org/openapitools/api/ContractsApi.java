/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ContractActionRequest;
import org.openapitools.model.ContractRequest;
import org.openapitools.model.ContractResponse;
import org.openapitools.model.ContractsResponse;
import org.openapitools.model.ErrorResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-07-02T16:42:48.383715+02:00[Europe/Paris]")
@Validated
@Tag(name = "contracts", description = "the contracts API")
public interface ContractsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /contracts/{contractRef} : Read a Contract
     * Get an existing Contract
     *
     * @param contractRef External identifier of the contract (required)
     * @return OK (status code 200)
     *         or ERROR - Not authenticated (status code 401)
     *         or ERROR - Access token does not have the required scope (status code 403)
     *         or ERROR - Internal Server error (status code 500)
     */
    @Operation(
        operationId = "getContract",
        summary = "Read a Contract",
        tags = { "Search/Read" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ContractResponse.class))),
            @ApiResponse(responseCode = "401", description = "ERROR - Not authenticated", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorResponse.class))),
            @ApiResponse(responseCode = "403", description = "ERROR - Access token does not have the required scope", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorResponse.class))),
            @ApiResponse(responseCode = "500", description = "ERROR - Internal Server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorResponse.class)))
        },
        security = {
            @SecurityRequirement(name = "ApiKey"),
            @SecurityRequirement(name = "OAuth2", scopes={ "write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/contracts/{contractRef}",
        produces = { "application/json" }
    )
    default ResponseEntity<ContractResponse> getContract(
        @Parameter(name = "contractRef", description = "External identifier of the contract", required = true, schema = @Schema(description = "")) @PathVariable("contractRef") String contractRef
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ContractRequest\" : { \"$ref\" : \"#/components/examples/ContractRequest\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /contracts/{contractRef} : Patch a Contract
     * Update an existing Contract
     *
     * @param contractRef External identifier of the contract (required)
     * @param contractActionRequest  (optional)
     * @return NO_CONTENT (status code 204)
     *         or ERROR - Invalid object request (status code 400)
     *         or ERROR - Not authenticated (status code 401)
     *         or ERROR - Access token does not have the required scope (status code 403)
     *         or ERROR - Internal Server error (status code 500)
     */
    @Operation(
        operationId = "patchContract",
        summary = "Patch a Contract",
        tags = { "Create/Lifecycle" },
        responses = {
            @ApiResponse(responseCode = "204", description = "NO_CONTENT"),
            @ApiResponse(responseCode = "400", description = "ERROR - Invalid object request", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorResponse.class))),
            @ApiResponse(responseCode = "401", description = "ERROR - Not authenticated", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorResponse.class))),
            @ApiResponse(responseCode = "403", description = "ERROR - Access token does not have the required scope", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorResponse.class))),
            @ApiResponse(responseCode = "500", description = "ERROR - Internal Server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorResponse.class)))
        },
        security = {
            @SecurityRequirement(name = "ApiKey"),
            @SecurityRequirement(name = "OAuth2", scopes={ "write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/contracts/{contractRef}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> patchContract(
        @Parameter(name = "contractRef", description = "External identifier of the contract", required = true, schema = @Schema(description = "")) @PathVariable("contractRef") String contractRef,
        @Parameter(name = "ContractActionRequest", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) ContractActionRequest contractActionRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /contracts : Add a Contract
     * Add a new Contract
     *
     * @param contractRequest  (optional)
     * @return SUCCESS - Contract created (status code 201)
     *         or ERROR - Invalid object request (status code 400)
     *         or ERROR - Not authenticated (status code 401)
     *         or ERROR - Access token does not have the required scope (status code 403)
     *         or ERROR - Internal Server error (status code 500)
     */
    @Operation(
        operationId = "postContract",
        summary = "Add a Contract",
        tags = { "Create/Lifecycle" },
        responses = {
            @ApiResponse(responseCode = "201", description = "SUCCESS - Contract created", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ContractResponse.class))),
            @ApiResponse(responseCode = "400", description = "ERROR - Invalid object request", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorResponse.class))),
            @ApiResponse(responseCode = "401", description = "ERROR - Not authenticated", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorResponse.class))),
            @ApiResponse(responseCode = "403", description = "ERROR - Access token does not have the required scope", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorResponse.class))),
            @ApiResponse(responseCode = "500", description = "ERROR - Internal Server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorResponse.class)))
        },
        security = {
            @SecurityRequirement(name = "ApiKey"),
            @SecurityRequirement(name = "OAuth2", scopes={ "write" })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/contracts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ContractResponse> postContract(
        @Parameter(name = "ContractRequest", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) ContractRequest contractRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ContractRequest\" : { \"$ref\" : \"#/components/examples/ContractRequest\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /contracts : Search Contracts
     * Multi-criteria search for contracts. The result is a list (maybe empty) of contracts
     *
     * @param subscriberRef External identifier of the subscriber (optional)
     * @param contractStatus Contract Status (optional)
     * @param limit Limits the number of items on a page (optional)
     * @param offset Specifies the page number of the list to be displayed (optional)
     * @return SUCCESS - Returns a list of Contracts (status code 200)
     *         or ERROR - Not authenticated (status code 401)
     *         or ERROR - Access token does not have the required scope (status code 403)
     *         or ERROR - Internal Server error (status code 500)
     */
    @Operation(
        operationId = "searchContracts",
        summary = "Search Contracts",
        tags = { "Search/Read" },
        responses = {
            @ApiResponse(responseCode = "200", description = "SUCCESS - Returns a list of Contracts", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ContractsResponse.class))),
            @ApiResponse(responseCode = "401", description = "ERROR - Not authenticated", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorResponse.class))),
            @ApiResponse(responseCode = "403", description = "ERROR - Access token does not have the required scope", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorResponse.class))),
            @ApiResponse(responseCode = "500", description = "ERROR - Internal Server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ErrorResponse.class)))
        },
        security = {
            @SecurityRequirement(name = "ApiKey"),
            @SecurityRequirement(name = "OAuth2", scopes={ "read" })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/contracts",
        produces = { "application/json" }
    )
    default ResponseEntity<ContractsResponse> searchContracts(
        @Parameter(name = "subscriberRef", description = "External identifier of the subscriber", schema = @Schema(description = "")) @Valid @RequestParam(value = "subscriberRef", required = false) String subscriberRef,
        @Parameter(name = "contractStatus", description = "Contract Status", schema = @Schema(description = "")) @Valid @RequestParam(value = "contractStatus", required = false) String contractStatus,
        @Parameter(name = "limit", description = "Limits the number of items on a page", schema = @Schema(description = "")) @Valid @RequestParam(value = "limit", required = false) Integer limit,
        @Parameter(name = "offset", description = "Specifies the page number of the list to be displayed", schema = @Schema(description = "")) @Valid @RequestParam(value = "offset", required = false) Integer offset
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"ContractsResponse\" : { \"$ref\" : \"#/components/examples/ContractsResponse\" } }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
