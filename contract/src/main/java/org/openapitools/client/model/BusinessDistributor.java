/*
 * Travel Contract
 * The Travel Contract Application System
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.client.model.BusinessAddress;
import org.openapitools.client.model.BusinessDistributorEFacturation;
import org.openapitools.client.model.BusinessPerson;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes distributor organisation &amp; contact
 */
@ApiModel(description = "Describes distributor organisation & contact")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-07-04T15:17:57.729789200+02:00[Europe/Paris]")
public class BusinessDistributor {
  public static final String SERIALIZED_NAME_DISRIBUTOR_REF = "disributorRef";
  @SerializedName(SERIALIZED_NAME_DISRIBUTOR_REF)
  private String disributorRef;

  public static final String SERIALIZED_NAME_E_FACTURATION = "eFacturation";
  @SerializedName(SERIALIZED_NAME_E_FACTURATION)
  private BusinessDistributorEFacturation eFacturation;

  public static final String SERIALIZED_NAME_CONTACT_PERSON = "contactPerson";
  @SerializedName(SERIALIZED_NAME_CONTACT_PERSON)
  private BusinessPerson contactPerson;

  public static final String SERIALIZED_NAME_CONTACT_ADDRESS = "contactAddress";
  @SerializedName(SERIALIZED_NAME_CONTACT_ADDRESS)
  private BusinessAddress contactAddress;

  public BusinessDistributor() { 
  }

  public BusinessDistributor disributorRef(String disributorRef) {
    
    this.disributorRef = disributorRef;
    return this;
  }

   /**
   * External reference of distributor
   * @return disributorRef
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "esgi SA", value = "External reference of distributor")

  public String getDisributorRef() {
    return disributorRef;
  }


  public void setDisributorRef(String disributorRef) {
    this.disributorRef = disributorRef;
  }


  public BusinessDistributor eFacturation(BusinessDistributorEFacturation eFacturation) {
    
    this.eFacturation = eFacturation;
    return this;
  }

   /**
   * Get eFacturation
   * @return eFacturation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BusinessDistributorEFacturation geteFacturation() {
    return eFacturation;
  }


  public void seteFacturation(BusinessDistributorEFacturation eFacturation) {
    this.eFacturation = eFacturation;
  }


  public BusinessDistributor contactPerson(BusinessPerson contactPerson) {
    
    this.contactPerson = contactPerson;
    return this;
  }

   /**
   * Get contactPerson
   * @return contactPerson
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BusinessPerson getContactPerson() {
    return contactPerson;
  }


  public void setContactPerson(BusinessPerson contactPerson) {
    this.contactPerson = contactPerson;
  }


  public BusinessDistributor contactAddress(BusinessAddress contactAddress) {
    
    this.contactAddress = contactAddress;
    return this;
  }

   /**
   * Get contactAddress
   * @return contactAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public BusinessAddress getContactAddress() {
    return contactAddress;
  }


  public void setContactAddress(BusinessAddress contactAddress) {
    this.contactAddress = contactAddress;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessDistributor businessDistributor = (BusinessDistributor) o;
    return Objects.equals(this.disributorRef, businessDistributor.disributorRef) &&
        Objects.equals(this.eFacturation, businessDistributor.eFacturation) &&
        Objects.equals(this.contactPerson, businessDistributor.contactPerson) &&
        Objects.equals(this.contactAddress, businessDistributor.contactAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(disributorRef, eFacturation, contactPerson, contactAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessDistributor {\n");
    sb.append("    disributorRef: ").append(toIndentedString(disributorRef)).append("\n");
    sb.append("    eFacturation: ").append(toIndentedString(eFacturation)).append("\n");
    sb.append("    contactPerson: ").append(toIndentedString(contactPerson)).append("\n");
    sb.append("    contactAddress: ").append(toIndentedString(contactAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("disributorRef");
    openapiFields.add("eFacturation");
    openapiFields.add("contactPerson");
    openapiFields.add("contactAddress");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BusinessDistributor
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (BusinessDistributor.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in BusinessDistributor is not found in the empty JSON string", BusinessDistributor.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BusinessDistributor.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BusinessDistributor` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if (jsonObj.get("disributorRef") != null && !jsonObj.get("disributorRef").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `disributorRef` to be a primitive type in the JSON string but got `%s`", jsonObj.get("disributorRef").toString()));
      }
      // validate the optional field `eFacturation`
      if (jsonObj.getAsJsonObject("eFacturation") != null) {
        BusinessDistributorEFacturation.validateJsonObject(jsonObj.getAsJsonObject("eFacturation"));
      }
      // validate the optional field `contactPerson`
      if (jsonObj.getAsJsonObject("contactPerson") != null) {
        BusinessPerson.validateJsonObject(jsonObj.getAsJsonObject("contactPerson"));
      }
      // validate the optional field `contactAddress`
      if (jsonObj.getAsJsonObject("contactAddress") != null) {
        BusinessAddress.validateJsonObject(jsonObj.getAsJsonObject("contactAddress"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BusinessDistributor.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BusinessDistributor' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BusinessDistributor> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BusinessDistributor.class));

       return (TypeAdapter<T>) new TypeAdapter<BusinessDistributor>() {
           @Override
           public void write(JsonWriter out, BusinessDistributor value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BusinessDistributor read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BusinessDistributor given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BusinessDistributor
  * @throws IOException if the JSON string is invalid with respect to BusinessDistributor
  */
  public static BusinessDistributor fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BusinessDistributor.class);
  }

 /**
  * Convert an instance of BusinessDistributor to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

